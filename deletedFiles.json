[
  {
    "source": "client/src/pages/@components/PrivateTask/PrivateTask.module.css",
    "content": ".editGroup,\n.btnGroup {\n  display: flex;\n  gap: 8px;\n}\n\n.labelInput {\n  width: 400px;\n  padding: 2px;\n}\n\n.btn {\n  padding: 2px;\n}\n\n@media screen and (max-width: 640px) {\n  .labelInput {\n    width: 100%;\n  }\n}\n"
  },
  {
    "source": "client/src/pages/@components/PrivateTask/PrivateTask.tsx",
    "content": "import type { TaskModel } from '$/api/@types/models';\nimport { useState, type ChangeEvent } from 'react';\nimport { apiClient } from 'src/utils/apiClient';\nimport { returnNull } from 'src/utils/returnNull';\nimport styles from './PrivateTask.module.css';\n\nexport const PrivateTask = (props: { task: TaskModel; fetchTasks: () => Promise<void> }) => {\n  const { task } = props;\n  const [editingTaskId, setEditingTaskId] = useState<string>();\n  const [editingLabel, setEditingLabel] = useState('');\n  const isEditing = editingTaskId === task.id;\n\n  const editLabel = (e: ChangeEvent<HTMLInputElement>) => {\n    setEditingLabel(e.target.value);\n  };\n  const toggleDone = async () => {\n    await apiClient.private.tasks\n      .patch({ body: { taskId: task.id, done: !task.done, label: task.label } })\n      .catch(returnNull);\n    await props.fetchTasks();\n  };\n  const deleteTask = async () => {\n    await apiClient.private.tasks.delete({ body: { taskId: task.id } }).catch(returnNull);\n    await props.fetchTasks();\n  };\n  const updateTaskLabel = async () => {\n    await apiClient.private.tasks\n      .patch({ body: { taskId: task.id, done: task.done, label: editingLabel } })\n      .catch(returnNull);\n    setEditingTaskId(undefined);\n    setEditingLabel('');\n    await props.fetchTasks();\n  };\n  const startEditTask = () => {\n    setEditingTaskId(task.id);\n    setEditingLabel(task.label);\n  };\n\n  return (\n    <label>\n      <div className={styles.editGroup}>\n        <input type=\"checkbox\" checked={task.done} onChange={toggleDone} />\n        {isEditing ? (\n          <input\n            type=\"text\"\n            value={editingLabel}\n            className={styles.labelInput}\n            onChange={editLabel}\n          />\n        ) : (\n          <span>{task.label}</span>\n        )}\n      </div>\n      <div className={styles.btnGroup}>\n        <input type=\"button\" value=\"DELETE\" className={styles.btn} onClick={deleteTask} />\n        {isEditing ? (\n          <input type=\"button\" value=\"SAVE\" className={styles.btn} onClick={updateTaskLabel} />\n        ) : (\n          <input type=\"button\" value=\"EDIT\" className={styles.btn} onClick={startEditTask} />\n        )}\n      </div>\n    </label>\n  );\n};\n"
  },
  {
    "source": "client/src/pages/@hooks/useLoading.tsx",
    "content": "import { atom, useAtom } from 'jotai';\nimport { useCallback } from 'react';\nimport { Loading } from '../../components/Loading/Loading';\n\nconst countAtom = atom(0);\nconst loadingAtom = atom((get) => get(countAtom) > 0);\n\nexport const useLoading = () => {\n  const [count, setCount] = useAtom(countAtom);\n  const [loading] = useAtom(loadingAtom);\n  const addLoading = useCallback(() => setCount(count + 1), [count, setCount]);\n  const removeLoading = useCallback(() => setCount(count - 1), [count, setCount]);\n\n  return {\n    loadingElm: <Loading visible={loading} />,\n    addLoading,\n    removeLoading,\n  };\n};\n"
  }
]